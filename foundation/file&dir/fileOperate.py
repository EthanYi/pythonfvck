#!/usr/bin/env pythonimport osimport statimport timeimport pickleimport StringIOdef fileReadLine(filePath):	file = open(filePath, "r+") 	try:		all_the_text = file.read()		print all_the_text	finally:		file.close()	with open(filePath) as file:		file.seek(0)		for line in file: #.readlines(): #.readline() 			print line,		print file.tell()		for line in file.readlines():			print line,		file.seek(15)		line = file.readline()		while line:			print line			line = file.readline()def fileReadBlock(filePath):	file  = open(filePath, "r+")	try:		while True:			block_text = file.read(200)			if not block_text:				break			print block_text	finally:		file.close()	for line in file.readlines(200)		print line,		def fileWriteLines(filePath, text_string):	file = open(filePath, "w+")	try:		file.write(text_string)	finally:		file.close()		def fileInfo(filePath):	fileStats = os.stat(filePath)	fileInfo = { 	'Size' : fileStats [ stat.ST_SIZE ], 	'LastModified' : time.ctime ( fileStats [ stat.ST_MTIME ] ), 	'LastAccessed' : time.ctime ( fileStats [ stat.ST_ATIME ] ), 	'CreationTime' : time.ctime ( fileStats [ stat.ST_CTIME ] ), 	'Mode' : fileStats [ stat.ST_MODE ] 	}	for inforField, infoValue in fileInfo:		print infoField,':"+infoValue	if stat.S_ISDIR(fileStats[stat.ST_MODE])		print "Directory"	else		print "Non-Directory"	if stat.S_ISREG ( fileStats [ stat.ST_MODE ] ):  		print 'Regular file.'  	elif stat.S_ISDIR ( fileStats [ stat.ST_MODE ] ):  		print 'Directory.'  	elif stat.S_ISLNK ( fileStats [ stat.ST_MODE ] ):  		print 'Shortcut.'  	elif stat.S_ISSOCK ( fileStats [ stat.ST_MODE ] ):  		print 'Socket.'  	elif stat.S_ISFIFO ( fileStats [ stat.ST_MODE ] ):  		print 'Named pipe.'  	elif stat.S_ISBLK ( fileStats [ stat.ST_MODE ] ):  		print 'Block special device.'  	elif stat.S_ISCHR ( fileStats [ stat.ST_MODE ] ):  		print 'Character special device.' 	if os.path.isdir ( filePath ): 		print 'Directory.' 	elif os.path.isfile ( filePath ): 		print 'File.' 	elif os.path.islink ( filePath ): 		print 'Shortcut.' 	elif os.path.ismount ( filePath ): 		print 'Mount point.' 		def filePickle(path):				#cPickle	fileHandle = open("pickleFile.txt","w")	testList = ['This', 2, 'is', 1, 'a', 0, 'test.]	pickle.dump(testList, fileHandle)	fileHandle.close()		fileHandle = open("pickleFile.txt", "w")	testList = pickle.load(fileHandle)	fileHandle.close()	def StringIO():	fileHandle = StringIO.StringIO("Let freedom ring")	print filehandle.read()	fileHandle.close()	